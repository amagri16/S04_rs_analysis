function [TransferEntropyM,XTSymbolMatrix,XFSymbolMatrix,YTSymbolMatrix,YFSymbolMatrix,f,varargout]=MainFunctionforFDTES(X,Y,TOrder,FOrder,TLag,Type,varargin)
%% Input:
%  (1) X is a n*1 time series vector. It can not contain Inf and NaN so you
%  have to pre-process it;
%  (2) Y is a n*1 time series vector. It can not contain Inf and NaN so you
%  have to pre-process it;
%  (3) TOrder is \lambda in the paper. It determines the coarse-graining on
%  time-line during the symbolization; It should be a positive number and 
%  never be larger than the length of time series.
%  (4) TOrder is \theta in the paper. It determines the coarse-graining on
%  frequency-line during the symbolization; It should be a positive number  
%  and never be larger than the length of frequency bands.
%  (5) TLag is \beta in the paper. It determines the length historical 
%  information added in transfer entropy calculation;
%  (6) Type is used to determine if you want to set all negative TEs in the
%  TransferEntropyM as 0. If Type=1, then all negative TEs become 0. If
%  Type=0, then we keep the raw data and you can still obtain negative TEs.
%  (7) varargin contains the information of statistic significance test. If
%  you do not want the statistic significance test, just do not enter
%  varargin. If varargin is not empty, it is expected to contain two inputs
%  so that NumofSurrogates=varargin{1} and ShiftInterval=varargin{2}. NumofSurrogates 
%  determines how many surrogates you are going to generate during the 
%  statistic significance test. Please note that surrogate generation and 
%  statistic significance test is computationally costly. For instance, 
%  NumofSurrogates=k means that k surrogates are generated, k times of 
%  Fourier-domain transfer entropy spectrum calculations are implemented, 
%  and a permutation test is carried out. ShiftInterval should be a vector 
%  [p,q], where p is the minimum time shift and q is the maximum time shift. 

%% Output:
%  (1) TransferEntropyM is the Fourier-domain transfer entropy spectrum
%  T(X,Y,t,\omega). If you calculate sum(TransferEntropyM), you obtain
%  T(X,Y,t); If you calculate sum(TransferEntropyM,2), you obtain
%  T(X,Y,\omega); If you calculate sum(sum(TransferEntropyM)), you obtain
%  T(X,Y); 
%  (2) XTSymbolMatrix is the symbolization result of X along the time line,
%   namely \Lambda_{\mathsf{X}}\left(t,\omega\right) in the paper.
%  (3) XFSymbolMatrix is the symbolization result of X along the frequency 
%   line, namely \Theta_{\mathsf{X}}\left(t,\omega\right) in the paper.
%  (4) YTSymbolMatrix is the symbolization result of Y along the time line,
%   namely \Lambda_{\mathsf{Y}}\left(t,\omega\right) in the paper.
%  (5) YFSymbolMatrix is the symbolization result of Y along the frequency 
%   line, namely \Theta_{\mathsf{Y}}\left(t,\omega\right) in the paper.
%  (6) f is the frequency band obtained from wavelet transfrom. Please note
%   that you are not required to specify a sampling frequency so f is
%   returned as number of cycles per sample. f is \omega in the paper.
%  (7) If you want to do statistic significance test and you do provide the
%  varargin, then you can ask for varargout. varargout{1}=P denotes the p
%  value of significance test. varargout{2}=Effectsize denotes the effect 
%  size. varargout{3}=TESample denotes the set of T(X,Y,\omega). varargout{4}
%  denotes the the set of T(X',Y,\omega) generated by surrogates.

%% Examples
%  (1) If you want all: 
%  [TransferEntropyM,XTSymbolMatrix,XFSymbolMatrix,YTSymbolMatrix,YFSymbolMatrix,f,P,Effectsize,TESample,SurrogatesTESample]=MainFunctionforFDTES(X,Y,TOrder,FOrder,TLag,Type,NumofSurrogates,ShiftInterval)
%  (2) If you do not want the statistic significance test: 
%  [TransferEntropyM,XTSymbolMatrix,XFSymbolMatrix,YTSymbolMatrix,YFSymbolMatrix,f]=MainFunctionforFDTES(X,Y,TOrder,FOrder,TLag,Type)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This is the main part of our function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Continuous wavelet transform
[~,~,f,~,SigX,SigY] = wcoherence(X,Y,256); 

%% Fourier domain representation
FX=flip(SigX,1);
FY=flip(SigY,1);
%disp('Generate the Fourier domain representation')

%% 2-dimensional symbolization
[XTSymbolMatrix,XFSymbolMatrix]=SymbolizationFunction(FX,TOrder,FOrder);
[YTSymbolMatrix,YFSymbolMatrix]=SymbolizationFunction(FY,TOrder,FOrder);
%disp('Implement the symbolization')

%% Transfer entropy calculation
TransferEntropyM=FourierDomainTransferEntropySpectrum(XFSymbolMatrix,XTSymbolMatrix,YFSymbolMatrix,YTSymbolMatrix,TOrder,FOrder,TLag);
%disp('Calculate the Fourier-domain transfer entropy spectrum')

%% Normalization and smooth
TransferEntropyM=smoothdata(smoothdata(TransferEntropyM,2,'gaussian'),1,'gaussian');
%disp('Smooth the Fourier-domain transfer entropy spectrum')

%% For output
XTSymbolMatrix=flip(XTSymbolMatrix,1);
XFSymbolMatrix=flip(XFSymbolMatrix,1);
YTSymbolMatrix=flip(YTSymbolMatrix,1);
YFSymbolMatrix=flip(YFSymbolMatrix,1);
TransferEntropyM=flip(TransferEntropyM,1);
if Type==1 
    TransferEntropyM=TransferEntropyM.*(TransferEntropyM>=0);
end

%% Significance test
if length(varargin)==2
    NumofSurrogates=varargin{1};
    ShiftInterval=varargin{2};
    [P,~,Effectsize,TESample,SurrogatesTESample]=SignificanceTestFunction(TransferEntropyM,X',Y',NumofSurrogates,ShiftInterval,TOrder,FOrder,TLag);
    varargout{1}=P;
    varargout{2}=Effectsize;
    varargout{3}=TESample;
    varargout{4}=SurrogatesTESample;
    %disp('Implement the statistic significance test')
end
